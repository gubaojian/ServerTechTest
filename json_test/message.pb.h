// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_message_2eproto_metadata_getter(int index);
class HMessage;
struct HMessageDefaultTypeInternal;
extern HMessageDefaultTypeInternal _HMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::HMessage* Arena::CreateMaybeMessage<::HMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class HMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HMessage) */ {
 public:
  inline HMessage() : HMessage(nullptr) {}
  virtual ~HMessage();
  explicit constexpr HMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HMessage(const HMessage& from);
  HMessage(HMessage&& from) noexcept
    : HMessage() {
    *this = ::std::move(from);
  }

  inline HMessage& operator=(const HMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline HMessage& operator=(HMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const HMessage* internal_default_instance() {
    return reinterpret_cast<const HMessage*>(
               &_HMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HMessage& a, HMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(HMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HMessage* New() const final {
    return CreateMaybeMessage<HMessage>(nullptr);
  }

  HMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HMessage& from);
  void MergeFrom(const HMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HMessage";
  }
  protected:
  explicit HMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kConnIdFieldNumber = 2,
    kAuthIdFieldNumber = 3,
    kMsgFieldNumber = 4,
  };
  // optional string action = 1;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // optional string connId = 2;
  bool has_connid() const;
  private:
  bool _internal_has_connid() const;
  public:
  void clear_connid();
  const std::string& connid() const;
  void set_connid(const std::string& value);
  void set_connid(std::string&& value);
  void set_connid(const char* value);
  void set_connid(const char* value, size_t size);
  std::string* mutable_connid();
  std::string* release_connid();
  void set_allocated_connid(std::string* connid);
  private:
  const std::string& _internal_connid() const;
  void _internal_set_connid(const std::string& value);
  std::string* _internal_mutable_connid();
  public:

  // optional string authId = 3;
  bool has_authid() const;
  private:
  bool _internal_has_authid() const;
  public:
  void clear_authid();
  const std::string& authid() const;
  void set_authid(const std::string& value);
  void set_authid(std::string&& value);
  void set_authid(const char* value);
  void set_authid(const char* value, size_t size);
  std::string* mutable_authid();
  std::string* release_authid();
  void set_allocated_authid(std::string* authid);
  private:
  const std::string& _internal_authid() const;
  void _internal_set_authid(const std::string& value);
  std::string* _internal_mutable_authid();
  public:

  // optional string msg = 4;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:HMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HMessage

// optional string action = 1;
inline bool HMessage::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HMessage::has_action() const {
  return _internal_has_action();
}
inline void HMessage::clear_action() {
  action_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HMessage::action() const {
  // @@protoc_insertion_point(field_get:HMessage.action)
  return _internal_action();
}
inline void HMessage::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:HMessage.action)
}
inline std::string* HMessage::mutable_action() {
  // @@protoc_insertion_point(field_mutable:HMessage.action)
  return _internal_mutable_action();
}
inline const std::string& HMessage::_internal_action() const {
  return action_.Get();
}
inline void HMessage::_internal_set_action(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HMessage::set_action(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  action_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:HMessage.action)
}
inline void HMessage::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:HMessage.action)
}
inline void HMessage::set_action(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:HMessage.action)
}
inline std::string* HMessage::_internal_mutable_action() {
  _has_bits_[0] |= 0x00000001u;
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HMessage::release_action() {
  // @@protoc_insertion_point(field_release:HMessage.action)
  if (!_internal_has_action()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return action_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HMessage::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:HMessage.action)
}

// optional string connId = 2;
inline bool HMessage::_internal_has_connid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HMessage::has_connid() const {
  return _internal_has_connid();
}
inline void HMessage::clear_connid() {
  connid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HMessage::connid() const {
  // @@protoc_insertion_point(field_get:HMessage.connId)
  return _internal_connid();
}
inline void HMessage::set_connid(const std::string& value) {
  _internal_set_connid(value);
  // @@protoc_insertion_point(field_set:HMessage.connId)
}
inline std::string* HMessage::mutable_connid() {
  // @@protoc_insertion_point(field_mutable:HMessage.connId)
  return _internal_mutable_connid();
}
inline const std::string& HMessage::_internal_connid() const {
  return connid_.Get();
}
inline void HMessage::_internal_set_connid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  connid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HMessage::set_connid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  connid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:HMessage.connId)
}
inline void HMessage::set_connid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  connid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:HMessage.connId)
}
inline void HMessage::set_connid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  connid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:HMessage.connId)
}
inline std::string* HMessage::_internal_mutable_connid() {
  _has_bits_[0] |= 0x00000002u;
  return connid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HMessage::release_connid() {
  // @@protoc_insertion_point(field_release:HMessage.connId)
  if (!_internal_has_connid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return connid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HMessage::set_allocated_connid(std::string* connid) {
  if (connid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  connid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:HMessage.connId)
}

// optional string authId = 3;
inline bool HMessage::_internal_has_authid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HMessage::has_authid() const {
  return _internal_has_authid();
}
inline void HMessage::clear_authid() {
  authid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& HMessage::authid() const {
  // @@protoc_insertion_point(field_get:HMessage.authId)
  return _internal_authid();
}
inline void HMessage::set_authid(const std::string& value) {
  _internal_set_authid(value);
  // @@protoc_insertion_point(field_set:HMessage.authId)
}
inline std::string* HMessage::mutable_authid() {
  // @@protoc_insertion_point(field_mutable:HMessage.authId)
  return _internal_mutable_authid();
}
inline const std::string& HMessage::_internal_authid() const {
  return authid_.Get();
}
inline void HMessage::_internal_set_authid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  authid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HMessage::set_authid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  authid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:HMessage.authId)
}
inline void HMessage::set_authid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  authid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:HMessage.authId)
}
inline void HMessage::set_authid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  authid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:HMessage.authId)
}
inline std::string* HMessage::_internal_mutable_authid() {
  _has_bits_[0] |= 0x00000004u;
  return authid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HMessage::release_authid() {
  // @@protoc_insertion_point(field_release:HMessage.authId)
  if (!_internal_has_authid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return authid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HMessage::set_allocated_authid(std::string* authid) {
  if (authid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  authid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:HMessage.authId)
}

// optional string msg = 4;
inline bool HMessage::_internal_has_msg() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HMessage::has_msg() const {
  return _internal_has_msg();
}
inline void HMessage::clear_msg() {
  msg_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& HMessage::msg() const {
  // @@protoc_insertion_point(field_get:HMessage.msg)
  return _internal_msg();
}
inline void HMessage::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:HMessage.msg)
}
inline std::string* HMessage::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:HMessage.msg)
  return _internal_mutable_msg();
}
inline const std::string& HMessage::_internal_msg() const {
  return msg_.Get();
}
inline void HMessage::_internal_set_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HMessage::set_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:HMessage.msg)
}
inline void HMessage::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:HMessage.msg)
}
inline void HMessage::set_msg(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:HMessage.msg)
}
inline std::string* HMessage::_internal_mutable_msg() {
  _has_bits_[0] |= 0x00000008u;
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HMessage::release_msg() {
  // @@protoc_insertion_point(field_release:HMessage.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return msg_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HMessage::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:HMessage.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
